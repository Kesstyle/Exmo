//buildscript {
//    repositories {
//        mavenLocal()
//        mavenCentral()
//    }
//    dependencies {
//        classpath "by.groovy:pluginsPrinter:1.0"
//    }
//}

plugins {
    id 'java'
    id 'idea'
}

group 'kes'
version '1.2'

apply plugin: 'java'
apply plugin: 'idea'

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    repositories {
        mavenCentral()
    }
}

allprojects {
    project.ext.artifactPath = "C:/Users/PC/Desktop/Exmoapp"
    project.ext.manifestPath = ""
    task collectProjectDependencies << {
        project.ext.collectManifestPath()
        println project.ext.manifestPath
    }
    configurations {
        // configuration that holds jars to copy into lib
        compile
        tempproject
    }

    jar.dependsOn collectProjectDependencies

    ext.branch = "unknown"

    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }

    if (System.getenv('BRANCH_NAME') != null) {
        branch = System.getenv('BRANCH_NAME')
    }
}



subprojects {

    apply plugin: 'maven-publish'

    publishing {

        publications {
            impl(MavenPublication) {
                groupId group
                artifactId project.name
                artifact jar

                // Include all dependencies in the pom file when publishing artefacts
                pom.withXml {
                    def dependenciesNode = asNode().appendNode("dependencies")
                    project.configurations.compile { conf ->
                        conf.dependencies.each { dep ->
                            if (dep.group != null) {
                                def dependencyNode = dependenciesNode.appendNode("dependency")
                                dependencyNode.appendNode("groupId", "${dep.group}")
                                dependencyNode.appendNode("artifactId", "${dep.name}")
                                dependencyNode.appendNode("version", "${dep.version}")
                            }
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                url "$nexusServer/nexus/content/repositories/snapshots"
                credentials {
                    username "$nexusUser"
                    password "$nexusPassword"
                }
            }
        }
    }

    apply plugin: PluginPrintPlugin
    ext.collectManifestPath = { ->
        def requiredProject = ""
        requiredProject += collectDep(configurations.compile.getAllDependencies())

        def compileFiles = configurations.compile.files { it instanceof ExternalDependency }.collect {
            File file = it
            "lib/${file.name}"
        }.join(' ')

        def manifestPath = requiredProject + compileFiles
        project.ext.manifestPath += manifestPath
        return project.ext.manifestPath
    }

    ext.collectDep = { DependencySet deps ->
        def requiredProject = ""
        deps.withType(ProjectDependency).each { dep ->
            def dependantProjects = dep.getDependencyProject()
            def projects = project(dependantProjects.path).libsDir.list().findAll { it.endsWith('.jar') }
            project(dependantProjects.path).each { pr ->
                project.ext.manifestPath += pr.project.ext.manifestPath + ' '
            }
            projects.removeAll(projects.findAll { it.endsWith('test.jar') })
            def depProjNames = projects.collect {
                "lib/" + it
            }.join(' ')
            requiredProject = requiredProject + depProjNames + ' '
            println 'Required Project: ' + requiredProject
        }
        requiredProject
    }

    ext.getBuildNumber = { ->
        if (System.env.PARENT_BUILD_NUMBER) {
            return System.env.PARENT_BUILD_NUMBER
        }
        if (System.env.BUILD_NUMBER) {
            return System.env.BUILD_NUMBER
        }
        return 0
    }

    if (branch == 'develop') {
        version = version + '.1.' + getBuildNumber() + '-SNAPSHOT'
    } else {
        version = version + '.0.' + branch.replaceAll('/', '_') + '.' + getBuildNumber() + '-SNAPSHOT'
    }
}